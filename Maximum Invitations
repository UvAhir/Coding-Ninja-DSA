Maximum Invitations
Send Feedback
Raj is throwing a birthday party. He wants to invite as many friends as possible. He wants a large wooden table to accommodate his friends. There is constraint for this: space in the room. The number of friends a table can accommodate is equal to its perimeter (the sum of all side lengths). The furniture must be placed so that the edges are parallel to the edges of the flat.
You will be given layout of the flat and you have to tell maximum number of friends that he can accommodate in his room.
Input Format:
The first line of input contains two integers R and C (1 <= R, C <= 400), these are the dimensions of the flat.
Each of the following R rows contain exactly C characters. Characters can be '.', 'X'. '.' character means that cell is free and can be used for placing wooden table. 'X' means that cell is blocked and hence, cannot be used.
Constraints:
Time Limit: 1 second
Output format:
Print the maximum number of friends Raj can accommodate, if he buys his table. 
Sample Input 1
2 2
..
..
Sample Output 1:
7
Sample Input 1
4 4
X.XX
X..X
..X.
..XX 
Sample Output 1:
9
Explanation:
Please refer to the image below for explanation:
Alt Text

***************************************************************************

import java.util.*;
public class Main {

	
	public static void main(String[] args) {
		/* Your class should be named Main.
 			* Read input as specified in the question.
 			* Print output as specified in the question.
		*/

		// Write your code here
		Scanner sc= new Scanner(System.in);
        int row = sc.nextInt();
        int col = sc.nextInt();
        
        char[][] arr = new char[row][col];
        
        for(int i=0;i<row;i++){
            String x = sc.next();
            for(int j=0;j<col;j++){
                arr[i][j] = x.charAt(j);                
            }
        }
        
        int max = 0;
        int[] histogram = new int[col];
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(arr[i][j]=='.'){
                    histogram[j]++;
                }
                else{
                    histogram[j] = 0;
                }
            }
            max = Math.max(max,getPerimeter(histogram));
        }
        
        System.out.println(max-1);
	}
    
    public static int getPerimeter(int[] histo){
        Stack < Integer > st = new Stack < > ();
        int max = 0;
        int n = histo.length;
        for (int i = 0; i <= n; i++) {
            while (!st.empty() && (i == n || histo[st.peek()] >= histo[i])) {
                int height = histo[st.peek()];
                st.pop();
                int width;
                if (st.empty())
                    width = 1;
                else
                    width = i - st.peek() - 1;
                max = Math.max(max, 2*width + 2*height);
            }
            st.push(i);
        }
        return max;
    }
}
